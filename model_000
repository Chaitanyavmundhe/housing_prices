{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10211,"databundleVersionId":111096,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_kg_hide-output":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-06-26T04:31:15.023154Z","iopub.execute_input":"2024-06-26T04:31:15.023559Z","iopub.status.idle":"2024-06-26T04:31:16.507757Z","shell.execute_reply.started":"2024-06-26T04:31:15.023527Z","shell.execute_reply":"2024-06-26T04:31:16.506452Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/home-data-for-ml-course/sample_submission.csv\n/kaggle/input/home-data-for-ml-course/sample_submission.csv.gz\n/kaggle/input/home-data-for-ml-course/train.csv.gz\n/kaggle/input/home-data-for-ml-course/data_description.txt\n/kaggle/input/home-data-for-ml-course/test.csv.gz\n/kaggle/input/home-data-for-ml-course/train.csv\n/kaggle/input/home-data-for-ml-course/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# All file paths\n\n\n**/kaggle/input/home-data-for-ml-course/sample_submission.csv**\n\n**/kaggle/input/home-data-for-ml-course/sample_submission.csv.gz**\n\n**/kaggle/input/home-data-for-ml-course/train.csv.gz**\n\n**/kaggle/input/home-data-for-ml-course/data_description.txt**\n\n**/kaggle/input/home-data-for-ml-course/test.csv.gz**\n\n**/kaggle/input/home-data-for-ml-course/train.csv**\n\n**/kaggle/input/home-data-for-ml-course/test.csv**\n","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:16.510492Z","iopub.execute_input":"2024-06-26T04:31:16.511245Z","iopub.status.idle":"2024-06-26T04:31:16.517279Z","shell.execute_reply.started":"2024-06-26T04:31:16.511106Z","shell.execute_reply":"2024-06-26T04:31:16.515882Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/home-data-for-ml-course/train.csv\", index_col='Id')\ndf.head()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:16.519561Z","iopub.execute_input":"2024-06-26T04:31:16.519989Z","iopub.status.idle":"2024-06-26T04:31:16.624036Z","shell.execute_reply.started":"2024-06-26T04:31:16.519956Z","shell.execute_reply":"2024-06-26T04:31:16.622718Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"    MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\nId                                                                    \n1           60       RL         65.0     8450   Pave   NaN      Reg   \n2           20       RL         80.0     9600   Pave   NaN      Reg   \n3           60       RL         68.0    11250   Pave   NaN      IR1   \n4           70       RL         60.0     9550   Pave   NaN      IR1   \n5           60       RL         84.0    14260   Pave   NaN      IR1   \n\n   LandContour Utilities LotConfig  ... PoolArea PoolQC Fence MiscFeature  \\\nId                                  ...                                     \n1          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n2          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n3          Lvl    AllPub    Inside  ...        0    NaN   NaN         NaN   \n4          Lvl    AllPub    Corner  ...        0    NaN   NaN         NaN   \n5          Lvl    AllPub       FR2  ...        0    NaN   NaN         NaN   \n\n   MiscVal MoSold  YrSold  SaleType  SaleCondition  SalePrice  \nId                                                             \n1        0      2    2008        WD         Normal     208500  \n2        0      5    2007        WD         Normal     181500  \n3        0      9    2008        WD         Normal     223500  \n4        0      2    2006        WD        Abnorml     140000  \n5        0     12    2008        WD         Normal     250000  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# ALL FEATURE LIST\n\nIndex([**'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'Alley',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageYrBlt',\n       'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal',\n       'MoSold', 'YrSold', 'SaleType', 'SaleCondition', 'SalePrice'**],\n      dtype='object')\n\n","metadata":{}},{"cell_type":"code","source":"# x_train is the input variable \n# y_train is the target \nx_train = np.array([8450, 9600])\ny_train = np.array([208500, 181500])\nprint(f\"x_train = {x_train}\")\nprint(f\"y_train = {y_train}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:16.625695Z","iopub.execute_input":"2024-06-26T04:31:16.626133Z","iopub.status.idle":"2024-06-26T04:31:16.635443Z","shell.execute_reply.started":"2024-06-26T04:31:16.626091Z","shell.execute_reply":"2024-06-26T04:31:16.633914Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"x_train = [8450 9600]\ny_train = [208500 181500]\n","output_type":"stream"}]},{"cell_type":"code","source":"# m is the number of training examples\nprint(f\"x_train.shape: {x_train.shape}\")\nm = x_train.shape[0]\nprint(f\"Number of training examples is: {m}\")\nprint(len(x_train))","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:16.639188Z","iopub.execute_input":"2024-06-26T04:31:16.639576Z","iopub.status.idle":"2024-06-26T04:31:16.647868Z","shell.execute_reply.started":"2024-06-26T04:31:16.639544Z","shell.execute_reply":"2024-06-26T04:31:16.646615Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"x_train.shape: (2,)\nNumber of training examples is: 2\n2\n","output_type":"stream"}]},{"cell_type":"code","source":"# Plot the data points\nplt.scatter(x_train, y_train, marker='x', c='b')\n# Set the title\nplt.title(\"Housing Prices\")\n# Set the y-axis label\nplt.ylabel('Price ( dollars)')\n# Set the x-axis label\nplt.xlabel('Size (sqft)')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:16.649648Z","iopub.execute_input":"2024-06-26T04:31:16.650082Z","iopub.status.idle":"2024-06-26T04:31:16.999149Z","shell.execute_reply.started":"2024-06-26T04:31:16.650051Z","shell.execute_reply":"2024-06-26T04:31:16.997873Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"w = -23.478\nb = 406987.1\nprint(f\"w: {w}\")\nprint(f\"b: {b}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.000975Z","iopub.execute_input":"2024-06-26T04:31:17.001402Z","iopub.status.idle":"2024-06-26T04:31:17.010217Z","shell.execute_reply.started":"2024-06-26T04:31:17.001367Z","shell.execute_reply":"2024-06-26T04:31:17.008639Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"w: -23.478\nb: 406987.1\n","output_type":"stream"}]},{"cell_type":"code","source":"def compute_model_output(x, w, b):\n    \"\"\"\n    Computes the prediction of a linear model\n    Args:\n      x (ndarray (m,)): Data, m examples \n      w,b (scalar)    : model parameters  \n    Returns\n      f_wb (ndarray (m,)): model prediction\n    \"\"\"\n    m = x.shape[0]\n    f_wb = np.zeros(m)\n    for i in range(m):\n        f_wb[i] = w * x[i] + b\n        \n    return f_wb","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.011963Z","iopub.execute_input":"2024-06-26T04:31:17.012442Z","iopub.status.idle":"2024-06-26T04:31:17.021422Z","shell.execute_reply.started":"2024-06-26T04:31:17.012408Z","shell.execute_reply":"2024-06-26T04:31:17.019696Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"tmp_f_wb = compute_model_output(x_train, w, b,)\n\n# Plot our model prediction\nplt.plot(x_train, tmp_f_wb, c='b',label='Our Prediction')\n\n# Plot the data points\nplt.scatter(x_train, y_train, marker='x', c='r',label='Actual Values')\n\n# Set the title\nplt.title(\"Housing Prices\")\n# Set the y-axis label\nplt.ylabel('Price (in dollars)')\n# Set the x-axis label\nplt.xlabel('Size (sqft)')\nplt.legend()\nplt.show()\nprint(y_train[1]==y_train[0])","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.023041Z","iopub.execute_input":"2024-06-26T04:31:17.023997Z","iopub.status.idle":"2024-06-26T04:31:17.438042Z","shell.execute_reply.started":"2024-06-26T04:31:17.023960Z","shell.execute_reply":"2024-06-26T04:31:17.435930Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"False\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# First optional lab completed","metadata":{}},{"cell_type":"code","source":"import numpy as np\n%matplotlib widget\nimport matplotlib.pyplot as plt\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.439563Z","iopub.execute_input":"2024-06-26T04:31:17.439962Z","iopub.status.idle":"2024-06-26T04:31:17.582629Z","shell.execute_reply.started":"2024-06-26T04:31:17.439930Z","shell.execute_reply":"2024-06-26T04:31:17.581171Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def compute_cost(x, y, w, b): \n    \"\"\"\n    Computes the cost function for linear regression.\n    \n    Args:\n      x (ndarray (m,)): Data, m examples \n      y (ndarray (m,)): target values\n      w,b (scalar)    : model parameters  \n    \n    Returns\n        total_cost (float): The cost of using w,b as the parameters for linear regression\n               to fit the data points in x and y\n    \"\"\"\n    # number of training examples\n    m = x.shape[0] \n    \n    cost_sum = 0 \n    for i in range(m): \n        f_wb = w * x[i] + b   \n        cost = (f_wb - y[i]) ** 2  \n        cost_sum = cost_sum + cost  \n    total_cost = (1 / (2 * m)) * cost_sum  \n\n    return total_cost\n\n\nselected_columns_loc = df.loc[:5, ['LotArea', 'SalePrice']]\nprint(selected_columns_loc)","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.584072Z","iopub.execute_input":"2024-06-26T04:31:17.584456Z","iopub.status.idle":"2024-06-26T04:31:17.599075Z","shell.execute_reply.started":"2024-06-26T04:31:17.584423Z","shell.execute_reply":"2024-06-26T04:31:17.597368Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"    LotArea  SalePrice\nId                    \n1      8450     208500\n2      9600     181500\n3     11250     223500\n4      9550     140000\n5     14260     250000\n","output_type":"stream"}]},{"cell_type":"code","source":"x_train = np.array([8450,9600,11250,9550,14260,])\ny_train = np.array([208500,181500,223500,140000,250000,])","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.600704Z","iopub.execute_input":"2024-06-26T04:31:17.601081Z","iopub.status.idle":"2024-06-26T04:31:17.607928Z","shell.execute_reply.started":"2024-06-26T04:31:17.601049Z","shell.execute_reply":"2024-06-26T04:31:17.606410Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"plt.close('all') \n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.609825Z","iopub.execute_input":"2024-06-26T04:31:17.610203Z","iopub.status.idle":"2024-06-26T04:31:17.619648Z","shell.execute_reply.started":"2024-06-26T04:31:17.610172Z","shell.execute_reply":"2024-06-26T04:31:17.618464Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"import math, copy\nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.625105Z","iopub.execute_input":"2024-06-26T04:31:17.625498Z","iopub.status.idle":"2024-06-26T04:31:17.634267Z","shell.execute_reply.started":"2024-06-26T04:31:17.625465Z","shell.execute_reply":"2024-06-26T04:31:17.632934Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"x_train = np.array([8450,9600,])\ny_train = np.array([208500,181500,])","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.635803Z","iopub.execute_input":"2024-06-26T04:31:17.636264Z","iopub.status.idle":"2024-06-26T04:31:17.648767Z","shell.execute_reply.started":"2024-06-26T04:31:17.636224Z","shell.execute_reply":"2024-06-26T04:31:17.647248Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"def compute_cost(x, y, w, b):\n   \n    m = x.shape[0] \n    cost = 0\n    \n    for i in range(m):\n        f_wb = w * x[i] + b\n        cost = cost + (f_wb - y[i])**2\n    total_cost = 1 / (2 * m) * cost\n\n    return total_cost","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:32:04.413182Z","iopub.execute_input":"2024-06-26T04:32:04.413625Z","iopub.status.idle":"2024-06-26T04:32:04.421191Z","shell.execute_reply.started":"2024-06-26T04:32:04.413573Z","shell.execute_reply":"2024-06-26T04:32:04.419711Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def compute_gradient(x, y, w, b): \n    \"\"\"\n    Computes the gradient for linear regression \n    Args:\n      x (ndarray (m,)): Data, m examples \n      y (ndarray (m,)): target values\n      w,b (scalar)    : model parameters  \n    Returns\n      dj_dw (scalar): The gradient of the cost w.r.t. the parameters w\n      dj_db (scalar): The gradient of the cost w.r.t. the parameter b     \n     \"\"\"\n    \n    # Number of training examples\n    m = x.shape[0]    \n    dj_dw = 0\n    dj_db = 0\n    \n    for i in range(m):  \n        f_wb = w * x[i] + b \n        dj_dw_i = (f_wb - y[i]) * x[i] \n        dj_db_i = f_wb - y[i] \n        dj_db += dj_db_i\n        dj_dw += dj_dw_i \n    dj_dw = dj_dw / m \n    dj_db = dj_db / m \n        \n    return dj_dw, dj_db","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.667803Z","iopub.execute_input":"2024-06-26T04:31:17.668223Z","iopub.status.idle":"2024-06-26T04:31:17.688547Z","shell.execute_reply.started":"2024-06-26T04:31:17.668191Z","shell.execute_reply":"2024-06-26T04:31:17.687289Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"def compute_gradient(x, y, w, b): \n    \"\"\"\n    Computes the gradient for linear regression \n    Args:\n      x (ndarray (m,)): Data, m examples \n      y (ndarray (m,)): target values\n      w,b (scalar)    : model parameters  \n    Returns\n      dj_dw (scalar): The gradient of the cost w.r.t. the parameters w\n      dj_db (scalar): The gradient of the cost w.r.t. the parameter b     \n     \"\"\"\n    \n    # Number of training examples\n    m = x.shape[0]    \n    dj_dw = 0\n    dj_db = 0\n    \n    for i in range(m):  \n        f_wb = w * x[i] + b \n        dj_dw_i = (f_wb - y[i]) * x[i] \n        dj_db_i = f_wb - y[i] \n        dj_db += dj_db_i\n        dj_dw += dj_dw_i \n    dj_dw = dj_dw / m \n    dj_db = dj_db / m \n        \n    return dj_dw, dj_db\n\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:49.639645Z","iopub.execute_input":"2024-06-26T04:31:49.640050Z","iopub.status.idle":"2024-06-26T04:31:49.649625Z","shell.execute_reply.started":"2024-06-26T04:31:49.640015Z","shell.execute_reply":"2024-06-26T04:31:49.648309Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def gradient_descent(x, y, w_in, b_in, alpha, num_iters, cost_function, gradient_function): \n    \"\"\"\n    Performs gradient descent to fit w,b. Updates w,b by taking \n    num_iters gradient steps with learning rate alpha\n    \n    Args:\n      x (ndarray (m,))  : Data, m examples \n      y (ndarray (m,))  : target values\n      w_in,b_in (scalar): initial values of model parameters  \n      alpha (float):     Learning rate\n      num_iters (int):   number of iterations to run gradient descent\n      cost_function:     function to call to produce cost\n      gradient_function: function to call to produce gradient\n      \n    Returns:\n      w (scalar): Updated value of parameter after running gradient descent\n      b (scalar): Updated value of parameter after running gradient descent\n      J_history (List): History of cost values\n      p_history (list): History of parameters [w,b] \n      \"\"\"\n    \n    # An array to store cost J and w's at each iteration primarily for graphing later\n    J_history = []\n    p_history = []\n    b = b_in\n    w = w_in\n    \n    for i in range(num_iters):\n        # Calculate the gradient and update the parameters using gradient_function\n        dj_dw, dj_db = gradient_function(x, y, w , b)     \n\n        # Update Parameters using equation (3) above\n        b = b - alpha * dj_db                            \n        w = w - alpha * dj_dw                            \n\n        # Save cost J at each iteration\n        if i<100000:      # prevent resource exhaustion \n            J_history.append( cost_function(x, y, w , b))\n            p_history.append([w,b])\n        # Print cost every at intervals 10 times or as many iterations if < 10\n        if i% math.ceil(num_iters/10) == 0:\n            print(f\"Iteration {i:4}: Cost {J_history[-1]:0.2e} \",\n                  f\"dj_dw: {dj_dw: 0.3e}, dj_db: {dj_db: 0.3e}  \",\n                  f\"w: {w: 0.3e}, b:{b: 0.5e}\")\n \n    return w, b, J_history, p_history #return w and J,w history for graphing","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.708806Z","iopub.execute_input":"2024-06-26T04:31:17.709285Z","iopub.status.idle":"2024-06-26T04:31:17.724026Z","shell.execute_reply.started":"2024-06-26T04:31:17.709237Z","shell.execute_reply":"2024-06-26T04:31:17.722638Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# initialize parameters\nw_init = 0\nb_init = 0\n# some gradient descent settings\niterations = 10000\ntmp_alpha = 1.0e-2\n# run gradient descent\nw_final, b_final, J_hist, p_hist = gradient_descent(x_train ,y_train, w_init, b_init, tmp_alpha, \n                                                    iterations, compute_cost, compute_gradient)\nprint(f\"(w,b) found by gradient descent: ({w_final:8.4f},{b_final:8.4f})\")","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:17.725790Z","iopub.execute_input":"2024-06-26T04:31:17.727150Z","iopub.status.idle":"2024-06-26T04:31:17.878897Z","shell.execute_reply.started":"2024-06-26T04:31:17.727103Z","shell.execute_reply":"2024-06-26T04:31:17.877639Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Iteration    0: Cost 1.26e+22  dj_dw: -1.752e+09, dj_db: -1.950e+05   w:  1.752e+07, b: 1.95000e+03\nIteration 1000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 2000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 3000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 4000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 5000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 6000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 7000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 8000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\nIteration 9000: Cost nan  dj_dw:  nan, dj_db:  nan   w:  nan, b: nan\n(w,b) found by gradient descent: (     nan,     nan)\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/2885804429.py:8: RuntimeWarning: overflow encountered in scalar power\n  cost = cost + (f_wb - y[i])**2\n/tmp/ipykernel_33/198244029.py:20: RuntimeWarning: overflow encountered in scalar multiply\n  dj_dw_i = (f_wb - y[i]) * x[i]\n/tmp/ipykernel_33/1926063390.py:34: RuntimeWarning: invalid value encountered in scalar subtract\n  w = w - alpha * dj_dw\n","output_type":"stream"}]},{"cell_type":"code","source":"# plot cost versus iteration  \nfig, (ax1, ax2) = plt.subplots(1, 2, constrained_layout=True, figsize=(12,4))\nax1.plot(J_hist[:100])\nax2.plot(1000 + np.arange(len(J_hist[1000:])), J_hist[1000:])\nax1.set_title(\"Cost vs. iteration(start)\");  ax2.set_title(\"Cost vs. iteration (end)\")\nax1.set_ylabel('Cost')            ;  ax2.set_ylabel('Cost') \nax1.set_xlabel('iteration step')  ;  ax2.set_xlabel('iteration step') \nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-26T04:31:35.356750Z","iopub.execute_input":"2024-06-26T04:31:35.357221Z","iopub.status.idle":"2024-06-26T04:31:35.453083Z","shell.execute_reply.started":"2024-06-26T04:31:35.357181Z","shell.execute_reply":"2024-06-26T04:31:35.451500Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"Canvas(toolbar=None)","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"52ddadb805ed454cac2c43a6c8d26c4c"}},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}